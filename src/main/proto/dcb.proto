syntax = "proto3";
package io.axoniq.axonserver.grpc.event.dcb;
option java_multiple_files = true;

service DcbEventStore {

  rpc Append (stream AppendEventsRequest) returns (AppendEventsResponse);

  // finite
  rpc Source (SourceEventsRequest) returns (stream SourceEventsResponse);

  // infinite
  rpc Stream (StreamEventsRequest) returns (stream StreamEventsResponse);

  rpc GetHead(GetHeadRequest) returns (GetHeadResponse);

  rpc GetTail(GetTailRequest) returns (GetTailResponse);

  // approximation
  rpc GetSequenceAt(GetSequenceAtRequest) returns (GetSequenceAtResponse);

  rpc AddTags (AddTagsRequest) returns (AddTagsResponse);

  rpc RemoveTags (RemoveTagsRequest) returns (RemoveTagsResponse);

  rpc GetTags (GetTagsRequest) returns (GetTagsResponse);
}

service DcbSnapshotStore {

  rpc Add (AddSnapshotRequest) returns (AddSnapshotResponse);

  rpc Delete (DeleteSnapshotsRequest) returns (DeleteSnapshotsResponse);

  rpc List (ListSnapshotsRequest) returns (stream ListSnapshotsResponse);

  rpc GetLast (GetLastSnapshotRequest) returns (GetLastSnapshotResponse);
}

message Event {
  /* The unique identifier of this event */
  string identifier = 1;
  int64 timestamp = 2;
  string name = 3;
  string version = 4;
  /* The Payload of the Event */
  bytes payload = 5;
  map<string, string> metadata = 6;
}

message Tag {
  bytes key = 1;
  bytes value = 2;
}

message TaggedEvent {
  Event event = 1;
  repeated Tag tag = 2;
}

message SequencedEvent {
  int64 sequence = 1;
  Event event = 2;
}

// Appending
message AppendEventsRequest {
  ConsistencyCondition condition = 1;
  repeated TaggedEvent event = 2;
}

message AppendEventsResponse {
  int64 sequence_of_the_first_event = 1;
  int32 transaction_size = 2;
  int64 consistency_marker = 3;
}

// Sourcing
message SourceEventsRequest {
  // inclusive
  int64 from_sequence = 1;
  repeated Criterion criterion = 2;
}

message SourceEventsResponse {
  oneof result {
    SequencedEvent event = 1;
    int64 consistency_marker = 2;
  }
}

message ConsistencyCondition {
  /**
- The Position to start checking for the consistency of an append
- Examples
  - When Consistency marker is n (where n > 0), event with Global Sequence Number n will be checked
  - When Consistency marker is 0, the first event in the event store (Global Sequence Number = 0) will be checked
  - When Consistency marker is the `Seed`, the check starts with the very first event (if any) in the event store
  - When creating a new command model, `Seed` can be used to verify the
    command model has never been used before.
    Subsequent appends for this command model **must** use ConsistencyMarker of at least the
    Global Sequence Number of the latest event in the command model
   */
  int64 consistency_marker = 1;
  repeated Criterion criterion = 2;
}

message Criterion {
  TagsAndNamesCriterion tags_and_names = 1;
}

message TagsAndNamesCriterion {
  repeated string name = 1;
  repeated Tag tag = 2;
}

message StreamEventsRequest {
  /* The token to start streaming from */
  int64 from_sequence = 1;
  repeated Criterion criterion = 2;
}

message StreamEventsResponse {
  SequencedEvent event = 1;
}

message GetHeadRequest {

}

message GetHeadResponse {
  int64 sequence = 1;
}

message GetTailRequest {

}

message GetTailResponse {
  int64 sequence = 1;
}

message GetSequenceAtRequest {
  int64 timestamp = 1;
}

message GetSequenceAtResponse {
  int64 sequence = 1;
}

message AddTagsRequest {
  int64 sequence = 1;
  repeated Tag tag = 2;
}

message AddTagsResponse {

}

message RemoveTagsRequest {
  int64 sequence = 1;
  repeated Tag tag = 2;
}

message RemoveTagsResponse {

}

message GetTagsRequest {
  int64 sequence = 1;
}

message GetTagsResponse {
  repeated Tag tag = 1;
}

message Snapshot {
  string name = 1;
  string revision = 2;
  bytes payload = 3;
}

message AddSnapshotRequest {
  bytes key = 1;
  int64 sequence = 2;
  bool prune = 3;
  Snapshot snapshot = 4;
}

message AddSnapshotResponse {

}

message DeleteSnapshotsRequest {
  bytes key = 1;
  // inclusive
  int64 from_sequence = 2;
  // exclusive
  int64 to_sequence = 3;
}

message DeleteSnapshotsResponse {

}

message ListSnapshotsRequest {
  bytes key = 1;
  // inclusive
  int64 from_sequence = 2;
  // exclusive
  int64 to_sequence = 3;
}

message ListSnapshotsResponse {
  bytes key = 1;
  int64 sequence = 2;
  Snapshot snapshot = 3;
}

message GetLastSnapshotRequest {
  bytes key = 1;
}

message GetLastSnapshotResponse {
  bytes key = 1;
  int64 sequence = 2;
  Snapshot snapshot = 3;
}
syntax = "proto3";
package io.axoniq.axonserver.grpc.event.dcb;
option java_multiple_files = true;

service DcbEventStore {

  rpc Append (stream AppendRequest) returns (AppendResponse);

  // finite
  rpc Source (SourceRequest) returns (stream SourceResponse);

  // infinite
  rpc Stream (StreamRequest) returns (stream StreamResponse);
}

// Shared
// PlainEvent, Raw, NakedEvent, IdentifiableEventPayload

// Event storage engine
message IdentifiableEventPayload {
  /* The unique identifier of this event */
  string identifier = 1;

  reserved 2, 3, 4, 5, 6, 7, 8;
  /* The Payload of the Event */
  bytes payload = 9;
}

message Tag {
  bytes key = 1;
  bytes value = 2;
}

message TypedEventPayload {
  IdentifiableEventPayload event = 1;
  string type = 2;
}

message TaggedEventPayload {
  TypedEventPayload typed_event = 1;
  repeated Tag tag = 2;
}

// Appending
message AppendRequest {
  oneof request {
    ConsistencyCondition condition = 1;
    Event event = 2;
  }

  message Event {
    TaggedEventPayload event = 1;
  }
}

message AppendResponse {
  Position last_position = 1;
}

// Sourcing
message SourceRequest {
  repeated Criterion criterion = 1;
}

message SourceResponse {
  oneof result {
    // ServetSentEvent, DomainEvent, SourcedEvent, TypedEvent, Item
    Event event = 1; // plain event, tags, type, timestamp, filterkey
    Position consistency_marker = 2;
  }

  message Event {
    repeated string filter_key = 1;
    int64 timestamp = 2;
    TaggedEventPayload tagged_event = 3;
  }
}

message ConsistencyCondition {
  /**
- The Position to start checking for the consistency of an append
- Examples
  - When Consistency marker is n (where n > 0), event with Global Sequence Number n will not
  be checked, but we start checking at event n + 1 (if existing)
  - When Consistency marker is 0, the first event in the event store
  (Global Sequence Number = 0) will not be checked
  - When Consistency marker is the `Seed`, the check starts with the very first event (if any) in the event store
  - When creating a new command model, `Seed` can be used to verify the
    command model has never been used before.
    Subsequent appends for this command model **must** use ConsistencyMarker of at least the
    Global Sequence Number of the latest event in the command model
   */
  Position consistency_marker = 1;
  SourceRequest stream_query = 2;
}

/**
Marks the position in or before the event stream
- Either
  - The `Seed` alt names we thought about: Initial, Origin, Seed, Before, Null, Thingamajig, âˆ…
  - Global Sequence Number of an event
May contain shard or tier information as well.
 */
message Position {
  oneof raw {
    int64 sequence = 1;
    Seed seed = 2;
  }
}

/**
  Denotes the position before the start of the event stream
 */
message Seed {

}

message Criterion {
  string filter_key = 1;
  oneof criterion {
    TagsAndTypeCriterion tags_and_types = 2;
  }
}

message TagsAndTypeCriterion {
  string type = 1;
  repeated Tag tag = 2;
}

// Streaming

message StreamRequest {
  /* The token to start streaming from */
  int64 tracking_token = 1;
}

message StreamResponse {
  int64 tracking_token = 1;
  Event event = 2;

  message Event {
    TypedEventPayload typed_event = 1;
  }
}

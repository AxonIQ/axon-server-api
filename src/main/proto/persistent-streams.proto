syntax = "proto3";
package io.axoniq.axonserver.grpc.streams;
import "event.proto";
import "google/protobuf/empty.proto";
option java_multiple_files = true;

/* Service providing operations for persistent event streams, event streams where Axon Server keeps
   track of the progress. All operations require a header (AxonIQ-Context) to be passed with each request to define
   the context.
 */
service PersistentStreamService {
  /* Open a persistent event stream connection from a client. Creates the stream if it does not exist. */
  rpc OpenStream(stream StreamRequest) returns (stream StreamSignal) {

  }

  /* Deletes a persistent event stream. All existing connections to the stream are closed. */
  rpc DeleteStream(DeleteStreamRequest) returns (stream google.protobuf.Empty) {

  }

  /* Change properties of a persistent event stream. */
  rpc UpdateStream(UpdateStreamRequest) returns (stream google.protobuf.Empty) {

  }

  /* Returns a list of all persistent event streams defined (for the context). For each event stream it returns
    the progress per segment.  */
  rpc ListStreams(ListStreamsRequest) returns (stream StreamStatus) {

  }

  /* Resets the position of a persistent stream. */
  rpc ResetStream(ResetStreamRequest) returns (stream google.protobuf.Empty) {

  }
}

/* request to list the persistent streams for a context */
message ListStreamsRequest {

}
/* Contains the current status of a persistent stream */
message StreamStatus {
  string stream_id = 1; /* the unique identification of the persistent stream */
  string stream_name = 2; /* a name for the persistent stream */
  SequencingPolicy sequencing_policy = 3; /* the policy used to distribute events across segments. */
  string filter = 4; /* an expression to filter events, same syntax as used for ad-hoc queries on the event store */
  repeated SegmentPosition segments = 5; /* the last confirmed position per segment */
}

/* Contains the position per segment */
message SegmentPosition {
  int32 segment = 1; /* the segment number */
  int64 position = 2; /* the last confirmed position */
  string client_id = 3; /* the connected client, empty if there is no client connected to this segment */
  string error = 4; /* optional error reported by the client for this segment */
}

/* Request to set up a connection to a stream. Clients should first submit an OpenRequest on this connection
   to connect to a stream and can then submit Acknowledgement messages to report progress.  */
message StreamRequest {
  oneof request {
    Open open = 1; /* the initial message to connect to a stream */
    ProgressAcknowledgement acknowledgeProgress = 2; /* sends progress in processing events to Axon Server */
    Requests requests = 3; /* request a number of messages for a segment */
    SegmentError error = 4; /* notifies an error */
  }
}

/* Request to notify Axon Server of an error on a persistent stream segment */
message SegmentError {
  int32 segment = 1; /* the segment number */
  string error = 2; /* the error that occurred while processing the events for this segment */
}

/* Request to delete a persistent stream */
message DeleteStreamRequest {
  string stream_id = 1; /* the unique identification of the stream */
}

message ResetStreamRequest {
  string stream_id = 1; /* the unique identification of the stream */
  ResetStreamConfiguration options = 2;
}

/* Request to update the properties of a persistent stream */
message UpdateStreamRequest {
  string stream_id = 1; /* the unique identification of the stream */
  int32 segments = 2; /* Request to change the number of segments */
  string stream_name = 3; /* Request to change the name of the stream */
}


/* Request to open a connection to a persistent stream */
message Open {
  string stream_id = 1; /* the unique identification of the stream */
  string client_id = 2; /* the unique identification of the client */
  InitializationProperties initialization_properties = 3; /* properties to create the stream if it does not exist */
}

/* Properties to create the stream if it does not exist */
message InitializationProperties {
  int32 segments = 1; /* the initial number of segments */
  int64 initial_position = 2; /* the position in the event store to start reading from */
  SequencingPolicy sequencing_policy = 3; /* the sequencing policy */
  string filter = 4; /* an expression to filter events, same syntax as used for ad-hoc queries on the event store */
  string stream_name = 5; /* a name for the persistent stream */
}

/* Defines the policy used to distribute events across segments. The policy name must be known on the server. */
message SequencingPolicy {
  string policy_name = 1; /* the name of the sequencing policy */
  repeated string parameter = 2; /* optional list of parameters used by the sequencing policy */
}

/* Message to report progress of event processing for a specific segment in a stream */
message ProgressAcknowledgement {
  int32 segment = 1; /* the segment number */
  int64 position = 2; /* the position of the last processed event */
}

message Requests {
  int32 segment = 1; /* the segment number */
  int32 requests = 2; /* the number of messages to request */
}

/* Message sent by Axon Server to the client stream connection */
message StreamSignal {
  int32 segment = 1; /* the segment number */
  oneof type {
    io.axoniq.axonserver.grpc.event.EventWithToken event = 2; /* an event to process in the client */
    bool closed = 3; /* indicates that the segment is closed by Axon Server */
    OpenSegment open = 4; /* segment assigned to the client */
  }
}

/* Message to prepare client for events on a specific action */
message OpenSegment {
  int64 position_at_reset = 1; /* position of stream before reset stream actions */
}

/* Message to provide parameters for resetting a persistent stream */
message ResetStreamConfiguration {
  ResetType type = 1; /* the reset type */
  int64 instant = 2; /* timestamp in epoch milliseconds when ResetType is DATETIME */
  int64 position = 3; /* global index (inclusive) when ResetType is POSITION */
}

/* possible types for resetting a persistent stream */
enum ResetType {
  HEAD = 0;  /* reset the persistent stream to the head of the event store */
  TAIL = 1; /* reset the persistent stream to the first event of the event store */
  DATETIME = 2; /* reset the persistent stream to the first event at or after a given time */
  POSITION = 3; /* reset the persistent stream to a specific position in the event store */
}
syntax = "proto3";
package io.axoniq.axonserver.grpc.admin;
import "google/protobuf/empty.proto";
option java_multiple_files = true;

//************************ ContextAdminService *****************************

service ContextAdminService {

  rpc CreateContext(CreateContextRequest) returns (google.protobuf.Empty) ;

  rpc DeleteContext(DeleteContextRequest) returns (google.protobuf.Empty) ;

  rpc GetContext(GetContextRequest) returns (ContextOverview) ;

  rpc GetContexts(google.protobuf.Empty) returns (stream ContextOverview) ;

  rpc SubscribeContextUpdates(google.protobuf.Empty) returns (stream ContextUpdate) ;

}

service ReplicationGroupAdminService {

  rpc CreateReplicationGroup(CreateReplicationGroupRequest) returns (google.protobuf.Empty);

  rpc GetReplicationGroups(google.protobuf.Empty) returns (stream ReplicationGroupOverview);

  rpc GetReplicationGroup(GetReplicationGroupRequest) returns (ReplicationGroupOverview);

  rpc DeleteReplicationGroup(DeleteReplicationGroupRequest) returns (google.protobuf.Empty) ;

  rpc AddNodeToReplicationGroup(JoinReplicationGroup) returns (google.protobuf.Empty) ;

  rpc RemoveNodeFromReplicationGroup(LeaveReplicationGroup) returns (google.protobuf.Empty) ;

}

message CreateContextRequest {
  string name = 1;
  string replicationGroupName = 2;
  map<string, string> meta_data = 3;
}

message DeleteContextRequest {
  string name = 1;
  bool preserveEventStore = 2;
}

message GetContextRequest {
  string name = 1;
}

message ContextOverview {
  string name = 1;
  ReplicationGroupOverview replicationGroup = 2;
  map<string, string> meta_data = 3;
  int64 pendingSince = 4;
  bool changePending = 5;
}

message ContextUpdate {
  string context = 1;
  ContextUpdateType type = 2;
}

enum ContextUpdateType {

  /* new context has been created. */
  CREATED = 0;

  /* context has been requested to be removed */
  PRE_DELETED = 1;

  /* context has been removed */
  DELETED = 2;

}

message CreateReplicationGroupRequest {
  string name = 1;
  repeated ReplicationGroupMember members = 2;
  int64 pendingSince = 3;
  bool changePending = 4;
}

message ReplicationGroupOverview {
  string name = 1;
  repeated ReplicationGroupMember members = 2;
  int64 pendingSince = 3;
  bool changePending = 4;
  repeated string contexts = 5;
}

message DeleteReplicationGroupRequest {
  string name = 1;
  bool preserveEventStore = 2;
}

message ReplicationGroupMember {
  string node_name = 1;
  string host = 2;
  int32 port = 3;
  Role role = 4;
  bool pendingDelete = 5;
}

enum Role {
  ROLE_PRIMARY = 0;
  ROLE_ACTIVE_BACKUP = 2;
  ROLE_PASSIVE_BACKUP = 3;
  ROLE_MESSAGING_ONLY = 4;
  ROLE_SECONDARY = 5;
}

message GetReplicationGroupRequest {
  string name = 1;
}

message JoinReplicationGroup {
  string replication_group_name = 1;
  string node_name = 2;
  Role role = 3;
}

message LeaveReplicationGroup {
  string replication_group_name = 1;
  string node_name = 2;
  bool preserveEventStore = 3;
}

message ReplicationGroupContext {
  string replication_group_name = 1;
  string context_name = 2;
  map<string, string> meta_data = 3;
}

//************************ ApplicationAdminService *****************************
service  ApplicationAdminService {
  rpc CreateOrUpdateApplication(ApplicationRequest) returns (Token);

  rpc DeleteApplication(ApplicationId) returns (google.protobuf.Empty);

  rpc GetApplication(ApplicationId) returns (ApplicationOverview);

  rpc GetApplications(google.protobuf.Empty) returns (stream ApplicationOverview);

  rpc RefreshToken(ApplicationId) returns (Token);
}

message ApplicationRequest {
  string applicationName = 1;
  string description = 2;
  string token = 3;
  repeated ApplicationContextRole rolesPerContext = 4;
  map<string, string> meta_data = 5;
}

message ApplicationContextRole {
  string context = 1;
  repeated string roles = 2;
}

message Token {
 string token = 1;
}

message ApplicationId {
  string applicationName = 1;
}

message ApplicationOverview {
  string applicationName = 1;
  string description = 2;
  repeated ApplicationContextRole rolesPerContext = 3;
  map<string, string> meta_data = 4;
}

//************************ UserAdminService *****************************
service UserAdminService {

  rpc CreateOrUpdateUser(CreateOrUpdateUserRequest) returns (google.protobuf.Empty);

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

  rpc GetUsers(google.protobuf.Empty) returns (stream UserOverview);

}

message CreateOrUpdateUserRequest {
  string userName = 1;
  string password = 2;
  repeated UserRoleRequest userRoles = 3;
}

message DeleteUserRequest {
  string userName = 1;
}

message UserRoleRequest {
  string role = 1;
  string context = 2;
}

message UserRoleOverview {
  string role = 1;
  string context = 2;
}

message UserOverview {
  string userName = 1;
  bool enabled = 2;
  repeated UserRoleOverview userRoles = 3;
}
//***************************** Event Processor Admin Service ***************************

service EventProcessorAdminService {
  /*The following api return a stream of Empty to allow the server to complete the stream without any result.*/
  rpc PauseEventProcessor(EventProcessorIdentifier) returns (stream google.protobuf.Empty);
  rpc StartEventProcessor(EventProcessorIdentifier) returns (stream google.protobuf.Empty);
  rpc SplitEventProcessor(EventProcessorIdentifier) returns (stream google.protobuf.Empty);
  rpc MergeEventProcessor(EventProcessorIdentifier) returns (stream google.protobuf.Empty);
  rpc MoveEventProcessorSegment(MoveSegment) returns (stream google.protobuf.Empty);
}

message EventProcessorIdentifier {
  string processor_name = 1;
  string token_store_identifier = 2;
}

message MoveSegment {
  EventProcessorIdentifier event_processor = 1;
  int32 segment = 2;
  string target_client_id = 3;
}